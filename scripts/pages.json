[{"name":"Blank()","description":"io.github.ccjhr.charsequence.CharSequenceAssertionAdjective.Blank","location":"nagare /io.github.ccjhr.charsequence/-char-sequence-assertion-adjective/-blank/index.html","searchKeys":["Blank","Blank()","io.github.ccjhr.charsequence.CharSequenceAssertionAdjective.Blank"]},{"name":"Empty()","description":"io.github.ccjhr.charsequence.CharSequenceAssertionAdjective.Empty","location":"nagare /io.github.ccjhr.charsequence/-char-sequence-assertion-adjective/-empty/index.html","searchKeys":["Empty","Empty()","io.github.ccjhr.charsequence.CharSequenceAssertionAdjective.Empty"]},{"name":"Empty()","description":"io.github.ccjhr.collection.CollectionAssertionAdjective.Empty","location":"nagare /io.github.ccjhr.collection/-collection-assertion-adjective/-empty/index.html","searchKeys":["Empty","Empty()","io.github.ccjhr.collection.CollectionAssertionAdjective.Empty"]},{"name":"Even()","description":"io.github.ccjhr.number.NumberAssertionAdjectives.Even","location":"nagare /io.github.ccjhr.number/-number-assertion-adjectives/-even/index.html","searchKeys":["Even","Even()","io.github.ccjhr.number.NumberAssertionAdjectives.Even"]},{"name":"Even()","description":"io.github.ccjhr.number.UnsignedNumberAssertionAdjectives.Even","location":"nagare /io.github.ccjhr.number/-unsigned-number-assertion-adjectives/-even/index.html","searchKeys":["Even","Even()","io.github.ccjhr.number.UnsignedNumberAssertionAdjectives.Even"]},{"name":"InTheSameOrder()","description":"io.github.ccjhr.collection.ContainsExactlyAssertionAdjective.InTheSameOrder","location":"nagare /io.github.ccjhr.collection/-contains-exactly-assertion-adjective/-in-the-same-order/index.html","searchKeys":["InTheSameOrder","InTheSameOrder()","io.github.ccjhr.collection.ContainsExactlyAssertionAdjective.InTheSameOrder"]},{"name":"Negative()","description":"io.github.ccjhr.number.NumberAssertionAdjectives.Negative","location":"nagare /io.github.ccjhr.number/-number-assertion-adjectives/-negative/index.html","searchKeys":["Negative","Negative()","io.github.ccjhr.number.NumberAssertionAdjectives.Negative"]},{"name":"Null()","description":"io.github.ccjhr.any.AnyAssertionAdjective.Null","location":"nagare /io.github.ccjhr.any/-any-assertion-adjective/-null/index.html","searchKeys":["Null","Null()","io.github.ccjhr.any.AnyAssertionAdjective.Null"]},{"name":"Odd()","description":"io.github.ccjhr.number.NumberAssertionAdjectives.Odd","location":"nagare /io.github.ccjhr.number/-number-assertion-adjectives/-odd/index.html","searchKeys":["Odd","Odd()","io.github.ccjhr.number.NumberAssertionAdjectives.Odd"]},{"name":"Odd()","description":"io.github.ccjhr.number.UnsignedNumberAssertionAdjectives.Odd","location":"nagare /io.github.ccjhr.number/-unsigned-number-assertion-adjectives/-odd/index.html","searchKeys":["Odd","Odd()","io.github.ccjhr.number.UnsignedNumberAssertionAdjectives.Odd"]},{"name":"Positive()","description":"io.github.ccjhr.number.NumberAssertionAdjectives.Positive","location":"nagare /io.github.ccjhr.number/-number-assertion-adjectives/-positive/index.html","searchKeys":["Positive","Positive()","io.github.ccjhr.number.NumberAssertionAdjectives.Positive"]},{"name":"annotation class Experimental","description":"io.github.ccjhr.Experimental","location":"nagare /io.github.ccjhr/-experimental/index.html","searchKeys":["Experimental","annotation class Experimental","io.github.ccjhr.Experimental"]},{"name":"data class AssertionContext<T>(val content: T)","description":"io.github.ccjhr.AssertionContext","location":"nagare /io.github.ccjhr/-assertion-context/index.html","searchKeys":["AssertionContext","data class AssertionContext<T>(val content: T)","io.github.ccjhr.AssertionContext"]},{"name":"data class ContainsExactlyContext<T>(val collectionUnderTest: Collection<T>, val expectedElements: Collection<T>)","description":"io.github.ccjhr.collection.ContainsExactlyContext","location":"nagare /io.github.ccjhr.collection/-contains-exactly-context/index.html","searchKeys":["ContainsExactlyContext","data class ContainsExactlyContext<T>(val collectionUnderTest: Collection<T>, val expectedElements: Collection<T>)","io.github.ccjhr.collection.ContainsExactlyContext"]},{"name":"enum AnyAssertionAdjective : Enum<AnyAssertionAdjective> ","description":"io.github.ccjhr.any.AnyAssertionAdjective","location":"nagare /io.github.ccjhr.any/-any-assertion-adjective/index.html","searchKeys":["AnyAssertionAdjective","enum AnyAssertionAdjective : Enum<AnyAssertionAdjective> ","io.github.ccjhr.any.AnyAssertionAdjective"]},{"name":"enum CharSequenceAssertionAdjective : Enum<CharSequenceAssertionAdjective> ","description":"io.github.ccjhr.charsequence.CharSequenceAssertionAdjective","location":"nagare /io.github.ccjhr.charsequence/-char-sequence-assertion-adjective/index.html","searchKeys":["CharSequenceAssertionAdjective","enum CharSequenceAssertionAdjective : Enum<CharSequenceAssertionAdjective> ","io.github.ccjhr.charsequence.CharSequenceAssertionAdjective"]},{"name":"enum CollectionAssertionAdjective : Enum<CollectionAssertionAdjective> ","description":"io.github.ccjhr.collection.CollectionAssertionAdjective","location":"nagare /io.github.ccjhr.collection/-collection-assertion-adjective/index.html","searchKeys":["CollectionAssertionAdjective","enum CollectionAssertionAdjective : Enum<CollectionAssertionAdjective> ","io.github.ccjhr.collection.CollectionAssertionAdjective"]},{"name":"enum ContainsExactlyAssertionAdjective : Enum<ContainsExactlyAssertionAdjective> ","description":"io.github.ccjhr.collection.ContainsExactlyAssertionAdjective","location":"nagare /io.github.ccjhr.collection/-contains-exactly-assertion-adjective/index.html","searchKeys":["ContainsExactlyAssertionAdjective","enum ContainsExactlyAssertionAdjective : Enum<ContainsExactlyAssertionAdjective> ","io.github.ccjhr.collection.ContainsExactlyAssertionAdjective"]},{"name":"enum NumberAssertionAdjectives : Enum<NumberAssertionAdjectives> ","description":"io.github.ccjhr.number.NumberAssertionAdjectives","location":"nagare /io.github.ccjhr.number/-number-assertion-adjectives/index.html","searchKeys":["NumberAssertionAdjectives","enum NumberAssertionAdjectives : Enum<NumberAssertionAdjectives> ","io.github.ccjhr.number.NumberAssertionAdjectives"]},{"name":"enum UnsignedNumberAssertionAdjectives : Enum<UnsignedNumberAssertionAdjectives> ","description":"io.github.ccjhr.number.UnsignedNumberAssertionAdjectives","location":"nagare /io.github.ccjhr.number/-unsigned-number-assertion-adjectives/index.html","searchKeys":["UnsignedNumberAssertionAdjectives","enum UnsignedNumberAssertionAdjectives : Enum<UnsignedNumberAssertionAdjectives> ","io.github.ccjhr.number.UnsignedNumberAssertionAdjectives"]},{"name":"fun <T : Any> expectNotNull(obj: T?): T","description":"io.github.ccjhr.expectNotNull","location":"nagare /io.github.ccjhr/expect-not-null.html","searchKeys":["expectNotNull","fun <T : Any> expectNotNull(obj: T?): T","io.github.ccjhr.expectNotNull"]},{"name":"fun <T : Any> instanceString(obj: T): String","description":"io.github.ccjhr.instanceString","location":"nagare /io.github.ccjhr/instance-string.html","searchKeys":["instanceString","fun <T : Any> instanceString(obj: T): String","io.github.ccjhr.instanceString"]},{"name":"fun <T> AssertionContext(content: T)","description":"io.github.ccjhr.AssertionContext.AssertionContext","location":"nagare /io.github.ccjhr/-assertion-context/-assertion-context.html","searchKeys":["AssertionContext","fun <T> AssertionContext(content: T)","io.github.ccjhr.AssertionContext.AssertionContext"]},{"name":"fun <T> ContainsExactlyContext(collectionUnderTest: Collection<T>, expectedElements: Collection<T>)","description":"io.github.ccjhr.collection.ContainsExactlyContext.ContainsExactlyContext","location":"nagare /io.github.ccjhr.collection/-contains-exactly-context/-contains-exactly-context.html","searchKeys":["ContainsExactlyContext","fun <T> ContainsExactlyContext(collectionUnderTest: Collection<T>, expectedElements: Collection<T>)","io.github.ccjhr.collection.ContainsExactlyContext.ContainsExactlyContext"]},{"name":"fun Experimental()","description":"io.github.ccjhr.Experimental.Experimental","location":"nagare /io.github.ccjhr/-experimental/-experimental.html","searchKeys":["Experimental","fun Experimental()","io.github.ccjhr.Experimental.Experimental"]},{"name":"fun noExceptionThrown(invocation: () -> Any): Boolean","description":"io.github.ccjhr.throwable.noExceptionThrown","location":"nagare /io.github.ccjhr.throwable/no-exception-thrown.html","searchKeys":["noExceptionThrown","fun noExceptionThrown(invocation: () -> Any): Boolean","io.github.ccjhr.throwable.noExceptionThrown"]},{"name":"infix inline fun <KEY, VALUE> AssertionContext<out Map<KEY, VALUE>?>.contains(entry: Pair<KEY, VALUE>)","description":"io.github.ccjhr.map.contains","location":"nagare /io.github.ccjhr.map/contains.html","searchKeys":["contains","infix inline fun <KEY, VALUE> AssertionContext<out Map<KEY, VALUE>?>.contains(entry: Pair<KEY, VALUE>)","io.github.ccjhr.map.contains"]},{"name":"infix inline fun <KEY, VALUE> AssertionContext<out Map<KEY, VALUE>?>.containsKey(key: KEY)","description":"io.github.ccjhr.map.containsKey","location":"nagare /io.github.ccjhr.map/contains-key.html","searchKeys":["containsKey","infix inline fun <KEY, VALUE> AssertionContext<out Map<KEY, VALUE>?>.containsKey(key: KEY)","io.github.ccjhr.map.containsKey"]},{"name":"infix inline fun <KEY, VALUE> AssertionContext<out Map<KEY, VALUE>?>.hasSize(expectedSize: Int)","description":"io.github.ccjhr.map.hasSize","location":"nagare /io.github.ccjhr.map/has-size.html","searchKeys":["hasSize","infix inline fun <KEY, VALUE> AssertionContext<out Map<KEY, VALUE>?>.hasSize(expectedSize: Int)","io.github.ccjhr.map.hasSize"]},{"name":"infix inline fun <KEY, VALUE> AssertionContext<out Map<KEY, VALUE>?>.notContains(entry: Pair<KEY, VALUE>)","description":"io.github.ccjhr.map.notContains","location":"nagare /io.github.ccjhr.map/not-contains.html","searchKeys":["notContains","infix inline fun <KEY, VALUE> AssertionContext<out Map<KEY, VALUE>?>.notContains(entry: Pair<KEY, VALUE>)","io.github.ccjhr.map.notContains"]},{"name":"infix inline fun <KEY, VALUE> AssertionContext<out Map<KEY, VALUE>?>.notContainsKey(key: KEY)","description":"io.github.ccjhr.map.notContainsKey","location":"nagare /io.github.ccjhr.map/not-contains-key.html","searchKeys":["notContainsKey","infix inline fun <KEY, VALUE> AssertionContext<out Map<KEY, VALUE>?>.notContainsKey(key: KEY)","io.github.ccjhr.map.notContainsKey"]},{"name":"infix inline fun <T : Boolean?> AssertionContext<T>.is(value: Boolean)","description":"io.github.ccjhr.boolean.is","location":"nagare /io.github.ccjhr.boolean/is.html","searchKeys":["is","infix inline fun <T : Boolean?> AssertionContext<T>.is(value: Boolean)","io.github.ccjhr.boolean.is"]},{"name":"infix inline fun <T : Boolean?> AssertionContext<T>.isNot(value: Boolean)","description":"io.github.ccjhr.boolean.isNot","location":"nagare /io.github.ccjhr.boolean/is-not.html","searchKeys":["isNot","infix inline fun <T : Boolean?> AssertionContext<T>.isNot(value: Boolean)","io.github.ccjhr.boolean.isNot"]},{"name":"infix inline fun <T : CharSequence?> AssertionContext<T>.hasLength(expectedLength: Int)","description":"io.github.ccjhr.charsequence.hasLength","location":"nagare /io.github.ccjhr.charsequence/has-length.html","searchKeys":["hasLength","infix inline fun <T : CharSequence?> AssertionContext<T>.hasLength(expectedLength: Int)","io.github.ccjhr.charsequence.hasLength"]},{"name":"infix inline fun <T : CharSequence?> AssertionContext<T>.is(adjective: CharSequenceAssertionAdjective)","description":"io.github.ccjhr.charsequence.is","location":"nagare /io.github.ccjhr.charsequence/is.html","searchKeys":["is","infix inline fun <T : CharSequence?> AssertionContext<T>.is(adjective: CharSequenceAssertionAdjective)","io.github.ccjhr.charsequence.is"]},{"name":"infix inline fun <T : CharSequence?> AssertionContext<T>.isNot(adjective: CharSequenceAssertionAdjective)","description":"io.github.ccjhr.charsequence.isNot","location":"nagare /io.github.ccjhr.charsequence/is-not.html","searchKeys":["isNot","infix inline fun <T : CharSequence?> AssertionContext<T>.isNot(adjective: CharSequenceAssertionAdjective)","io.github.ccjhr.charsequence.isNot"]},{"name":"infix inline fun <T : Double?> AssertionContext<T>.is(adjective: NumberAssertionAdjectives)","description":"io.github.ccjhr.number.double.is","location":"nagare /io.github.ccjhr.number.double/is.html","searchKeys":["is","infix inline fun <T : Double?> AssertionContext<T>.is(adjective: NumberAssertionAdjectives)","io.github.ccjhr.number.double.is"]},{"name":"infix inline fun <T : Double?> AssertionContext<T>.isBetween(boundaries: ClosedFloatingPointRange<Double>)","description":"io.github.ccjhr.number.double.isBetween","location":"nagare /io.github.ccjhr.number.double/is-between.html","searchKeys":["isBetween","infix inline fun <T : Double?> AssertionContext<T>.isBetween(boundaries: ClosedFloatingPointRange<Double>)","io.github.ccjhr.number.double.isBetween"]},{"name":"infix inline fun <T : Double?> AssertionContext<T>.isGreaterThan(obj: Double)","description":"io.github.ccjhr.number.double.isGreaterThan","location":"nagare /io.github.ccjhr.number.double/is-greater-than.html","searchKeys":["isGreaterThan","infix inline fun <T : Double?> AssertionContext<T>.isGreaterThan(obj: Double)","io.github.ccjhr.number.double.isGreaterThan"]},{"name":"infix inline fun <T : Double?> AssertionContext<T>.isLessThan(obj: Double)","description":"io.github.ccjhr.number.double.isLessThan","location":"nagare /io.github.ccjhr.number.double/is-less-than.html","searchKeys":["isLessThan","infix inline fun <T : Double?> AssertionContext<T>.isLessThan(obj: Double)","io.github.ccjhr.number.double.isLessThan"]},{"name":"infix inline fun <T : Double?> AssertionContext<T>.isNot(adjective: NumberAssertionAdjectives)","description":"io.github.ccjhr.number.double.isNot","location":"nagare /io.github.ccjhr.number.double/is-not.html","searchKeys":["isNot","infix inline fun <T : Double?> AssertionContext<T>.isNot(adjective: NumberAssertionAdjectives)","io.github.ccjhr.number.double.isNot"]},{"name":"infix inline fun <T : Float?> AssertionContext<T>.is(adjective: NumberAssertionAdjectives)","description":"io.github.ccjhr.number.float.is","location":"nagare /io.github.ccjhr.number.float/is.html","searchKeys":["is","infix inline fun <T : Float?> AssertionContext<T>.is(adjective: NumberAssertionAdjectives)","io.github.ccjhr.number.float.is"]},{"name":"infix inline fun <T : Float?> AssertionContext<T>.isBetween(boundaries: ClosedFloatingPointRange<Float>)","description":"io.github.ccjhr.number.float.isBetween","location":"nagare /io.github.ccjhr.number.float/is-between.html","searchKeys":["isBetween","infix inline fun <T : Float?> AssertionContext<T>.isBetween(boundaries: ClosedFloatingPointRange<Float>)","io.github.ccjhr.number.float.isBetween"]},{"name":"infix inline fun <T : Float?> AssertionContext<T>.isGreaterThan(obj: Float)","description":"io.github.ccjhr.number.float.isGreaterThan","location":"nagare /io.github.ccjhr.number.float/is-greater-than.html","searchKeys":["isGreaterThan","infix inline fun <T : Float?> AssertionContext<T>.isGreaterThan(obj: Float)","io.github.ccjhr.number.float.isGreaterThan"]},{"name":"infix inline fun <T : Float?> AssertionContext<T>.isLessThan(obj: Float)","description":"io.github.ccjhr.number.float.isLessThan","location":"nagare /io.github.ccjhr.number.float/is-less-than.html","searchKeys":["isLessThan","infix inline fun <T : Float?> AssertionContext<T>.isLessThan(obj: Float)","io.github.ccjhr.number.float.isLessThan"]},{"name":"infix inline fun <T : Float?> AssertionContext<T>.isNot(adjective: NumberAssertionAdjectives)","description":"io.github.ccjhr.number.float.isNot","location":"nagare /io.github.ccjhr.number.float/is-not.html","searchKeys":["isNot","infix inline fun <T : Float?> AssertionContext<T>.isNot(adjective: NumberAssertionAdjectives)","io.github.ccjhr.number.float.isNot"]},{"name":"infix inline fun <T : Int?> AssertionContext<T>.is(adjective: NumberAssertionAdjectives)","description":"io.github.ccjhr.number.int.is","location":"nagare /io.github.ccjhr.number.int/is.html","searchKeys":["is","infix inline fun <T : Int?> AssertionContext<T>.is(adjective: NumberAssertionAdjectives)","io.github.ccjhr.number.int.is"]},{"name":"infix inline fun <T : Int?> AssertionContext<T>.isBetween(boundaries: ClosedRange<Int>)","description":"io.github.ccjhr.number.int.isBetween","location":"nagare /io.github.ccjhr.number.int/is-between.html","searchKeys":["isBetween","infix inline fun <T : Int?> AssertionContext<T>.isBetween(boundaries: ClosedRange<Int>)","io.github.ccjhr.number.int.isBetween"]},{"name":"infix inline fun <T : Int?> AssertionContext<T>.isGreaterThan(obj: Int)","description":"io.github.ccjhr.number.int.isGreaterThan","location":"nagare /io.github.ccjhr.number.int/is-greater-than.html","searchKeys":["isGreaterThan","infix inline fun <T : Int?> AssertionContext<T>.isGreaterThan(obj: Int)","io.github.ccjhr.number.int.isGreaterThan"]},{"name":"infix inline fun <T : Int?> AssertionContext<T>.isLessThan(obj: Int)","description":"io.github.ccjhr.number.int.isLessThan","location":"nagare /io.github.ccjhr.number.int/is-less-than.html","searchKeys":["isLessThan","infix inline fun <T : Int?> AssertionContext<T>.isLessThan(obj: Int)","io.github.ccjhr.number.int.isLessThan"]},{"name":"infix inline fun <T : Int?> AssertionContext<T>.isNot(adjective: NumberAssertionAdjectives)","description":"io.github.ccjhr.number.int.isNot","location":"nagare /io.github.ccjhr.number.int/is-not.html","searchKeys":["isNot","infix inline fun <T : Int?> AssertionContext<T>.isNot(adjective: NumberAssertionAdjectives)","io.github.ccjhr.number.int.isNot"]},{"name":"infix inline fun <T : Long?> AssertionContext<T>.is(adjective: NumberAssertionAdjectives)","description":"io.github.ccjhr.number.long.is","location":"nagare /io.github.ccjhr.number.long/is.html","searchKeys":["is","infix inline fun <T : Long?> AssertionContext<T>.is(adjective: NumberAssertionAdjectives)","io.github.ccjhr.number.long.is"]},{"name":"infix inline fun <T : Long?> AssertionContext<T>.isBetween(boundaries: ClosedRange<Long>)","description":"io.github.ccjhr.number.long.isBetween","location":"nagare /io.github.ccjhr.number.long/is-between.html","searchKeys":["isBetween","infix inline fun <T : Long?> AssertionContext<T>.isBetween(boundaries: ClosedRange<Long>)","io.github.ccjhr.number.long.isBetween"]},{"name":"infix inline fun <T : Long?> AssertionContext<T>.isGreaterThan(obj: Long)","description":"io.github.ccjhr.number.long.isGreaterThan","location":"nagare /io.github.ccjhr.number.long/is-greater-than.html","searchKeys":["isGreaterThan","infix inline fun <T : Long?> AssertionContext<T>.isGreaterThan(obj: Long)","io.github.ccjhr.number.long.isGreaterThan"]},{"name":"infix inline fun <T : Long?> AssertionContext<T>.isLessThan(obj: Long)","description":"io.github.ccjhr.number.long.isLessThan","location":"nagare /io.github.ccjhr.number.long/is-less-than.html","searchKeys":["isLessThan","infix inline fun <T : Long?> AssertionContext<T>.isLessThan(obj: Long)","io.github.ccjhr.number.long.isLessThan"]},{"name":"infix inline fun <T : Long?> AssertionContext<T>.isNot(adjective: NumberAssertionAdjectives)","description":"io.github.ccjhr.number.long.isNot","location":"nagare /io.github.ccjhr.number.long/is-not.html","searchKeys":["isNot","infix inline fun <T : Long?> AssertionContext<T>.isNot(adjective: NumberAssertionAdjectives)","io.github.ccjhr.number.long.isNot"]},{"name":"infix inline fun <T : Short?> AssertionContext<T>.is(adjective: NumberAssertionAdjectives)","description":"io.github.ccjhr.number.short.is","location":"nagare /io.github.ccjhr.number.short/is.html","searchKeys":["is","infix inline fun <T : Short?> AssertionContext<T>.is(adjective: NumberAssertionAdjectives)","io.github.ccjhr.number.short.is"]},{"name":"infix inline fun <T : Short?> AssertionContext<T>.isBetween(boundaries: ClosedRange<Int>)","description":"io.github.ccjhr.number.short.isBetween","location":"nagare /io.github.ccjhr.number.short/is-between.html","searchKeys":["isBetween","infix inline fun <T : Short?> AssertionContext<T>.isBetween(boundaries: ClosedRange<Int>)","io.github.ccjhr.number.short.isBetween"]},{"name":"infix inline fun <T : Short?> AssertionContext<T>.isGreaterThan(obj: Short)","description":"io.github.ccjhr.number.short.isGreaterThan","location":"nagare /io.github.ccjhr.number.short/is-greater-than.html","searchKeys":["isGreaterThan","infix inline fun <T : Short?> AssertionContext<T>.isGreaterThan(obj: Short)","io.github.ccjhr.number.short.isGreaterThan"]},{"name":"infix inline fun <T : Short?> AssertionContext<T>.isLessThan(obj: Short)","description":"io.github.ccjhr.number.short.isLessThan","location":"nagare /io.github.ccjhr.number.short/is-less-than.html","searchKeys":["isLessThan","infix inline fun <T : Short?> AssertionContext<T>.isLessThan(obj: Short)","io.github.ccjhr.number.short.isLessThan"]},{"name":"infix inline fun <T : Short?> AssertionContext<T>.isNot(adjective: NumberAssertionAdjectives)","description":"io.github.ccjhr.number.short.isNot","location":"nagare /io.github.ccjhr.number.short/is-not.html","searchKeys":["isNot","infix inline fun <T : Short?> AssertionContext<T>.isNot(adjective: NumberAssertionAdjectives)","io.github.ccjhr.number.short.isNot"]},{"name":"infix inline fun <T : String?> AssertionContext<T>.matches(regex: Regex)","description":"io.github.ccjhr.string.matches","location":"nagare /io.github.ccjhr.string/matches.html","searchKeys":["matches","infix inline fun <T : String?> AssertionContext<T>.matches(regex: Regex)","io.github.ccjhr.string.matches"]},{"name":"infix inline fun <T : String?> AssertionContext<T>.notMatches(regex: Regex)","description":"io.github.ccjhr.string.notMatches","location":"nagare /io.github.ccjhr.string/not-matches.html","searchKeys":["notMatches","infix inline fun <T : String?> AssertionContext<T>.notMatches(regex: Regex)","io.github.ccjhr.string.notMatches"]},{"name":"infix inline fun <T : Throwable?> AssertionContext<T>.hasMessage(message: String)","description":"io.github.ccjhr.throwable.hasMessage","location":"nagare /io.github.ccjhr.throwable/has-message.html","searchKeys":["hasMessage","infix inline fun <T : Throwable?> AssertionContext<T>.hasMessage(message: String)","io.github.ccjhr.throwable.hasMessage"]},{"name":"infix inline fun <T : UInt?> AssertionContext<T>.is(adjective: UnsignedNumberAssertionAdjectives)","description":"io.github.ccjhr.number.uint.is","location":"nagare /io.github.ccjhr.number.uint/is.html","searchKeys":["is","infix inline fun <T : UInt?> AssertionContext<T>.is(adjective: UnsignedNumberAssertionAdjectives)","io.github.ccjhr.number.uint.is"]},{"name":"infix inline fun <T : UInt?> AssertionContext<T>.isBetween(boundaries: ClosedRange<UInt>)","description":"io.github.ccjhr.number.uint.isBetween","location":"nagare /io.github.ccjhr.number.uint/is-between.html","searchKeys":["isBetween","infix inline fun <T : UInt?> AssertionContext<T>.isBetween(boundaries: ClosedRange<UInt>)","io.github.ccjhr.number.uint.isBetween"]},{"name":"infix inline fun <T : UInt?> AssertionContext<T>.isGreaterThan(obj: UInt)","description":"io.github.ccjhr.number.uint.isGreaterThan","location":"nagare /io.github.ccjhr.number.uint/is-greater-than.html","searchKeys":["isGreaterThan","infix inline fun <T : UInt?> AssertionContext<T>.isGreaterThan(obj: UInt)","io.github.ccjhr.number.uint.isGreaterThan"]},{"name":"infix inline fun <T : UInt?> AssertionContext<T>.isLessThan(obj: UInt)","description":"io.github.ccjhr.number.uint.isLessThan","location":"nagare /io.github.ccjhr.number.uint/is-less-than.html","searchKeys":["isLessThan","infix inline fun <T : UInt?> AssertionContext<T>.isLessThan(obj: UInt)","io.github.ccjhr.number.uint.isLessThan"]},{"name":"infix inline fun <T : UInt?> AssertionContext<T>.isNot(adjective: UnsignedNumberAssertionAdjectives)","description":"io.github.ccjhr.number.uint.isNot","location":"nagare /io.github.ccjhr.number.uint/is-not.html","searchKeys":["isNot","infix inline fun <T : UInt?> AssertionContext<T>.isNot(adjective: UnsignedNumberAssertionAdjectives)","io.github.ccjhr.number.uint.isNot"]},{"name":"infix inline fun <T : ULong?> AssertionContext<T>.is(adjective: UnsignedNumberAssertionAdjectives)","description":"io.github.ccjhr.number.ulong.is","location":"nagare /io.github.ccjhr.number.ulong/is.html","searchKeys":["is","infix inline fun <T : ULong?> AssertionContext<T>.is(adjective: UnsignedNumberAssertionAdjectives)","io.github.ccjhr.number.ulong.is"]},{"name":"infix inline fun <T : ULong?> AssertionContext<T>.isBetween(boundaries: ClosedRange<ULong>)","description":"io.github.ccjhr.number.ulong.isBetween","location":"nagare /io.github.ccjhr.number.ulong/is-between.html","searchKeys":["isBetween","infix inline fun <T : ULong?> AssertionContext<T>.isBetween(boundaries: ClosedRange<ULong>)","io.github.ccjhr.number.ulong.isBetween"]},{"name":"infix inline fun <T : ULong?> AssertionContext<T>.isGreaterThan(obj: ULong)","description":"io.github.ccjhr.number.ulong.isGreaterThan","location":"nagare /io.github.ccjhr.number.ulong/is-greater-than.html","searchKeys":["isGreaterThan","infix inline fun <T : ULong?> AssertionContext<T>.isGreaterThan(obj: ULong)","io.github.ccjhr.number.ulong.isGreaterThan"]},{"name":"infix inline fun <T : ULong?> AssertionContext<T>.isLessThan(obj: ULong)","description":"io.github.ccjhr.number.ulong.isLessThan","location":"nagare /io.github.ccjhr.number.ulong/is-less-than.html","searchKeys":["isLessThan","infix inline fun <T : ULong?> AssertionContext<T>.isLessThan(obj: ULong)","io.github.ccjhr.number.ulong.isLessThan"]},{"name":"infix inline fun <T : ULong?> AssertionContext<T>.isNot(adjective: UnsignedNumberAssertionAdjectives)","description":"io.github.ccjhr.number.ulong.isNot","location":"nagare /io.github.ccjhr.number.ulong/is-not.html","searchKeys":["isNot","infix inline fun <T : ULong?> AssertionContext<T>.isNot(adjective: UnsignedNumberAssertionAdjectives)","io.github.ccjhr.number.ulong.isNot"]},{"name":"infix inline fun <T : UShort?> AssertionContext<T>.is(adjective: UnsignedNumberAssertionAdjectives)","description":"io.github.ccjhr.number.ushort.is","location":"nagare /io.github.ccjhr.number.ushort/is.html","searchKeys":["is","infix inline fun <T : UShort?> AssertionContext<T>.is(adjective: UnsignedNumberAssertionAdjectives)","io.github.ccjhr.number.ushort.is"]},{"name":"infix inline fun <T : UShort?> AssertionContext<T>.isBetween(boundaries: ClosedRange<UInt>)","description":"io.github.ccjhr.number.ushort.isBetween","location":"nagare /io.github.ccjhr.number.ushort/is-between.html","searchKeys":["isBetween","infix inline fun <T : UShort?> AssertionContext<T>.isBetween(boundaries: ClosedRange<UInt>)","io.github.ccjhr.number.ushort.isBetween"]},{"name":"infix inline fun <T : UShort?> AssertionContext<T>.isGreaterThan(obj: UShort)","description":"io.github.ccjhr.number.ushort.isGreaterThan","location":"nagare /io.github.ccjhr.number.ushort/is-greater-than.html","searchKeys":["isGreaterThan","infix inline fun <T : UShort?> AssertionContext<T>.isGreaterThan(obj: UShort)","io.github.ccjhr.number.ushort.isGreaterThan"]},{"name":"infix inline fun <T : UShort?> AssertionContext<T>.isLessThan(obj: UShort)","description":"io.github.ccjhr.number.ushort.isLessThan","location":"nagare /io.github.ccjhr.number.ushort/is-less-than.html","searchKeys":["isLessThan","infix inline fun <T : UShort?> AssertionContext<T>.isLessThan(obj: UShort)","io.github.ccjhr.number.ushort.isLessThan"]},{"name":"infix inline fun <T : UShort?> AssertionContext<T>.isNot(adjective: UnsignedNumberAssertionAdjectives)","description":"io.github.ccjhr.number.ushort.isNot","location":"nagare /io.github.ccjhr.number.ushort/is-not.html","searchKeys":["isNot","infix inline fun <T : UShort?> AssertionContext<T>.isNot(adjective: UnsignedNumberAssertionAdjectives)","io.github.ccjhr.number.ushort.isNot"]},{"name":"infix inline fun <T> AssertionContext<T>.is(adjective: AnyAssertionAdjective)","description":"io.github.ccjhr.any.is","location":"nagare /io.github.ccjhr.any/is.html","searchKeys":["is","infix inline fun <T> AssertionContext<T>.is(adjective: AnyAssertionAdjective)","io.github.ccjhr.any.is"]},{"name":"infix inline fun <T> AssertionContext<T>.isEqualTo(other: Any)","description":"io.github.ccjhr.any.isEqualTo","location":"nagare /io.github.ccjhr.any/is-equal-to.html","searchKeys":["isEqualTo","infix inline fun <T> AssertionContext<T>.isEqualTo(other: Any)","io.github.ccjhr.any.isEqualTo"]},{"name":"infix inline fun <T> AssertionContext<T>.isNot(adjective: AnyAssertionAdjective)","description":"io.github.ccjhr.any.isNot","location":"nagare /io.github.ccjhr.any/is-not.html","searchKeys":["isNot","infix inline fun <T> AssertionContext<T>.isNot(adjective: AnyAssertionAdjective)","io.github.ccjhr.any.isNot"]},{"name":"infix inline fun <T> AssertionContext<T>.isNotEqualTo(other: Any)","description":"io.github.ccjhr.any.isNotEqualTo","location":"nagare /io.github.ccjhr.any/is-not-equal-to.html","searchKeys":["isNotEqualTo","infix inline fun <T> AssertionContext<T>.isNotEqualTo(other: Any)","io.github.ccjhr.any.isNotEqualTo"]},{"name":"infix inline fun <T> AssertionContext<T>.isNotOfType(type: KClass<*>)","description":"io.github.ccjhr.any.isNotOfType","location":"nagare /io.github.ccjhr.any/is-not-of-type.html","searchKeys":["isNotOfType","infix inline fun <T> AssertionContext<T>.isNotOfType(type: KClass<*>)","io.github.ccjhr.any.isNotOfType"]},{"name":"infix inline fun <T> AssertionContext<T>.isNotSameAs(expectedInstance: Any)","description":"io.github.ccjhr.any.isNotSameAs","location":"nagare /io.github.ccjhr.any/is-not-same-as.html","searchKeys":["isNotSameAs","infix inline fun <T> AssertionContext<T>.isNotSameAs(expectedInstance: Any)","io.github.ccjhr.any.isNotSameAs"]},{"name":"infix inline fun <T> AssertionContext<T>.isOfType(type: KClass<*>)","description":"io.github.ccjhr.any.isOfType","location":"nagare /io.github.ccjhr.any/is-of-type.html","searchKeys":["isOfType","infix inline fun <T> AssertionContext<T>.isOfType(type: KClass<*>)","io.github.ccjhr.any.isOfType"]},{"name":"infix inline fun <T> AssertionContext<T>.isSameAs(expectedInstance: Any)","description":"io.github.ccjhr.any.isSameAs","location":"nagare /io.github.ccjhr.any/is-same-as.html","searchKeys":["isSameAs","infix inline fun <T> AssertionContext<T>.isSameAs(expectedInstance: Any)","io.github.ccjhr.any.isSameAs"]},{"name":"infix inline fun <T> AssertionContext<out Collection<T>?>.contains(obj: T)","description":"io.github.ccjhr.collection.contains","location":"nagare /io.github.ccjhr.collection/contains.html","searchKeys":["contains","infix inline fun <T> AssertionContext<out Collection<T>?>.contains(obj: T)","io.github.ccjhr.collection.contains"]},{"name":"infix inline fun <T> AssertionContext<out Collection<T>?>.containsAllOf(expectedElements: Collection<T>)","description":"io.github.ccjhr.collection.containsAllOf","location":"nagare /io.github.ccjhr.collection/contains-all-of.html","searchKeys":["containsAllOf","infix inline fun <T> AssertionContext<out Collection<T>?>.containsAllOf(expectedElements: Collection<T>)","io.github.ccjhr.collection.containsAllOf"]},{"name":"infix inline fun <T> AssertionContext<out Collection<T>?>.containsExactly(expectedElements: Collection<T>): ContainsExactlyContext<T>","description":"io.github.ccjhr.collection.containsExactly","location":"nagare /io.github.ccjhr.collection/contains-exactly.html","searchKeys":["containsExactly","infix inline fun <T> AssertionContext<out Collection<T>?>.containsExactly(expectedElements: Collection<T>): ContainsExactlyContext<T>","io.github.ccjhr.collection.containsExactly"]},{"name":"infix inline fun <T> AssertionContext<out Collection<T>?>.containsNoneOf(unexpectedElements: Collection<T>)","description":"io.github.ccjhr.collection.containsNoneOf","location":"nagare /io.github.ccjhr.collection/contains-none-of.html","searchKeys":["containsNoneOf","infix inline fun <T> AssertionContext<out Collection<T>?>.containsNoneOf(unexpectedElements: Collection<T>)","io.github.ccjhr.collection.containsNoneOf"]},{"name":"infix inline fun <T> AssertionContext<out Collection<T>?>.hasSize(expectedSize: Int)","description":"io.github.ccjhr.collection.hasSize","location":"nagare /io.github.ccjhr.collection/has-size.html","searchKeys":["hasSize","infix inline fun <T> AssertionContext<out Collection<T>?>.hasSize(expectedSize: Int)","io.github.ccjhr.collection.hasSize"]},{"name":"infix inline fun <T> AssertionContext<out Collection<T>?>.is(adjective: CollectionAssertionAdjective)","description":"io.github.ccjhr.collection.is","location":"nagare /io.github.ccjhr.collection/is.html","searchKeys":["is","infix inline fun <T> AssertionContext<out Collection<T>?>.is(adjective: CollectionAssertionAdjective)","io.github.ccjhr.collection.is"]},{"name":"infix inline fun <T> AssertionContext<out Collection<T>?>.isNot(adjective: CollectionAssertionAdjective)","description":"io.github.ccjhr.collection.isNot","location":"nagare /io.github.ccjhr.collection/is-not.html","searchKeys":["isNot","infix inline fun <T> AssertionContext<out Collection<T>?>.isNot(adjective: CollectionAssertionAdjective)","io.github.ccjhr.collection.isNot"]},{"name":"infix inline fun <T> AssertionContext<out Collection<T>?>.notContains(obj: T)","description":"io.github.ccjhr.collection.notContains","location":"nagare /io.github.ccjhr.collection/not-contains.html","searchKeys":["notContains","infix inline fun <T> AssertionContext<out Collection<T>?>.notContains(obj: T)","io.github.ccjhr.collection.notContains"]},{"name":"infix inline fun <T> ContainsExactlyContext<T>.and(adjective: ContainsExactlyAssertionAdjective)","description":"io.github.ccjhr.collection.and","location":"nagare /io.github.ccjhr.collection/and.html","searchKeys":["and","infix inline fun <T> ContainsExactlyContext<T>.and(adjective: ContainsExactlyAssertionAdjective)","io.github.ccjhr.collection.and"]},{"name":"infix inline fun <T> T.mustSatisfy(assertion: (AssertionContext<T>) -> Unit)","description":"io.github.ccjhr.mustSatisfy","location":"nagare /io.github.ccjhr/must-satisfy.html","searchKeys":["mustSatisfy","infix inline fun <T> T.mustSatisfy(assertion: (AssertionContext<T>) -> Unit)","io.github.ccjhr.mustSatisfy"]},{"name":"inline fun <T : Throwable> expectsException(invocation: () -> Any): T","description":"io.github.ccjhr.throwable.expectsException","location":"nagare /io.github.ccjhr.throwable/expects-exception.html","searchKeys":["expectsException","inline fun <T : Throwable> expectsException(invocation: () -> Any): T","io.github.ccjhr.throwable.expectsException"]},{"name":"val collectionUnderTest: Collection<T>","description":"io.github.ccjhr.collection.ContainsExactlyContext.collectionUnderTest","location":"nagare /io.github.ccjhr.collection/-contains-exactly-context/collection-under-test.html","searchKeys":["collectionUnderTest","val collectionUnderTest: Collection<T>","io.github.ccjhr.collection.ContainsExactlyContext.collectionUnderTest"]},{"name":"val content: T","description":"io.github.ccjhr.AssertionContext.content","location":"nagare /io.github.ccjhr/-assertion-context/content.html","searchKeys":["content","val content: T","io.github.ccjhr.AssertionContext.content"]},{"name":"val expectedElements: Collection<T>","description":"io.github.ccjhr.collection.ContainsExactlyContext.expectedElements","location":"nagare /io.github.ccjhr.collection/-contains-exactly-context/expected-elements.html","searchKeys":["expectedElements","val expectedElements: Collection<T>","io.github.ccjhr.collection.ContainsExactlyContext.expectedElements"]}]
